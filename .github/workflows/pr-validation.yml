name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run full test suite
      run: npm run test:ci
    
    - name: Build project
      run: npm run build
    
    - name: Check for breaking changes
      run: |
        # Compare built artifacts structure
        if [ -f dist/types/index.d.ts ]; then
          echo "✅ Type definitions generated"
        else
          echo "❌ Type definitions missing"
          exit 1
        fi
        
        if [ -f dist/servers/persona.js ]; then
          echo "✅ Persona server built"
        else
          echo "❌ Persona server build failed"
          exit 1
        fi
    
    - name: Validate package.json
      run: |
        # Check if package.json is valid
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        echo "✅ package.json is valid JSON"
        
        # Check for required fields
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'description', 'main', 'scripts', 'dependencies'];
          for (const field of required) {
            if (!pkg[field]) {
              console.error(\`❌ Missing required field: \${field}\`);
              process.exit(1);
            }
          }
          console.log('✅ All required package.json fields present');
        "
    
    - name: Check commit message format
      run: |
        # Get the last commit message
        COMMIT_MSG=$(git log --format=%s -n 1 ${{ github.event.pull_request.head.sha }})
        
        # Check if it follows conventional commit format
        if echo "$COMMIT_MSG" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .+'; then
          echo "✅ Commit message follows conventional format: $COMMIT_MSG"
        else
          echo "ℹ️  Commit message format: $COMMIT_MSG"
          echo "💡 Consider using conventional commit format: type(scope): description"
        fi
    
    - name: Comment PR with validation results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## PR Validation Results')
          );
          
          const body = `## PR Validation Results
          
          ### ✅ Validation Passed
          - Tests: All tests passing
          - Build: Successfully built all artifacts
          - Package: Valid package.json structure
          
          This PR is ready for review! 🚀
          
          ---
          *This comment was automatically generated by the PR validation workflow*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }